#include<iostream>

using namespace std;


//Input in array
void input(int a[],int used_size)
{
    cout<<"\nEnter the elements in an array :";
    for(int i=0;i<used_size;i++)
    {
        cin>>a[i];
    }
    cout<<endl;
}


//Traversel
void display(int a[],int n)
{
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<"  ";
    }
    cout<<endl;
}


//Linear search
void lsearch(int a[],int used_size,int ele)
{

    int i;
    for(i=0;i<used_size;i++)
    {
        if(a[i]==ele)
        {
            cout<<"SEARCH USING LINEAR SEARCH : "<<endl;
            cout<<"Element found at "<<i<<endl;  
            break;
        }        
    }
    if(i==used_size)
    cout<<"NOT FOUND!!";  

}


//binary search
int bsearch(int a[],int used_size,int ele)
{
    
    int low=0;
    int high=used_size-1;
    while(low<=high)
    {
        int mid;
        mid=(low+high)/2;
        if(a[mid]==ele)
        return mid;
        if(ele>mid)
        {
           low=mid+1;
        }
        else
        {
            high=mid-1;
        }
    }
    return -1;
    
}


int main()
{
    // int a[100]={1,5,9,21};
    // int used_size=4,total_size,ele=9;
    
    int used_size,total_size=100,ele;
    int a[100];

    cout<<"\nEnter the size of array : ";
    cin>>used_size;

    input(a,used_size);

    cout<<"The array is : ";
    display(a,used_size);

    cout<<"\nEnter the element you wanna search : ";
    cin>>ele;

    // lsearch(a,used_size,ele);
    int j=bsearch(a,used_size,ele);
    cout<<"\nElement found at "<<j;
   
    return 0;
}


//IMP ABOUT BINARY SEARCH
    //Works only on sorted arrays
    //O(log n) WC Complexity
    //This search method searches for an element by breaking the search space into half each time it finds the wrong element.
    //The search continues towards either side of the mid, based on whether the element to be searched is lesser or greater than
    // the mid element of the current search space.


// cout<<"SOME POINTS OF LINEAR SEARCH \n 
//This search method searches for an element by visiting all the elements sequentially until the element is found or the array finishes. 
//It follows the array traversal method.\n
// It work for both sorted and unsorted array \n
// Time complexity is O(N)"<<endl;
